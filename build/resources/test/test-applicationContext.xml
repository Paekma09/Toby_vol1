<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
                           http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
                           http://www.springframework.org/schema/aop
                           http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
                           http://www.springframework.org/schema/tx
                           http://www.springframework.org/schema/tx/spring-tx-3.0.xsd">

    <bean id="dataSource" class="org.springframework.jdbc.datasource.SimpleDriverDataSource">
        <property name="driverClass" value="com.mysql.jdbc.Driver"/>
        <property name="url" value="jdbc:mysql://localhost/toby"/>
        <property name="username" value="root"/>
        <property name="password" value="1234"/>
    </bean>

    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>

<!--    트랜잭션 애노테이션 사용 -->
    <tx:annotation-driven />

<!--    빈 이름을 사용한 표현식을 갖는 포인트컷과 어드바이저 -->
<!--    <aop:config>-->
<!--        <aop:advisor advice-ref="transactionAdvice" pointcut="bean(*Service)"/>-->
<!--    </aop:config>-->

<!--    tx 스키마의 태그를 이용한 트랜잭션 어드바이스 정의 -->
    <!--    transactionManager 는 트랜잭션 매니저 빈 아이디가 "transactionManager" 라면 생략할 수 있다. -->
<!--    <tx:advice id="transactionAdvice">-->
<!--        <tx:attributes>-->
<!--            &lt;!&ndash;    propagation 이 "REQUIRED" 라면 생략할 수 있다. &ndash;&gt;-->
<!--            <tx:method name="get*" read-only="true"/>-->
<!--            <tx:method name="*"/>-->
<!--        </tx:attributes>-->
<!--    </tx:advice>-->

<!--    트랜잭션 속성을 사용하는 어드바이스 -->
<!--    <bean id="transactionAdvice" class="org.springframework.transaction.interceptor.TransactionInterceptor">-->
<!--        <property name="transactionManager" ref="transactionManager"/>-->
<!--        <property name="transactionAttributes">-->
<!--            <props>-->
<!--                <prop key="get*">PROPAGATION_REQUIRED, readOnly</prop>-->
<!--                <prop key="*">PROPAGATION_REQUIRED</prop>-->
<!--            </props>-->
<!--        </property>-->
<!--    </bean>-->

    <!--    <bean id="userService" class="user.service.UserServiceImpl">-->
<!--        <property name="userDao" ref="userDao"/>-->
<!--        <property name="transactionManager" ref="transactionManager"/>-->
<!--        <property name="mailSender" ref="mailSender"/>-->
<!--    </bean>-->

<!--    데코레이터 패턴을 위한 DI 설정 -->
<!--    <bean id="userService" class="user.service.UserServiceTx">-->
<!--        <property name="transactionManager" ref="transactionManager"/>-->
<!--        <property name="userService" ref="userServiceImpl"/>-->
<!--    </bean>-->

<!--    UserService 에 대한 트랜잭션 프록시 팩토리 빈 -->
<!--    <bean id="userService" class="user.service.TxProxyFactoryBean">-->
<!--        <property name="target" ref="userServiceImpl"/>-->
<!--        <property name="transactionManager" ref="transactionManager"/>-->
<!--        <property name="pattern" value="upgradeLevels"/>-->
<!--        <property name="serviceInterface" value="user.service.UserService"/>-->
<!--    </bean>-->

<!--    ProxyFactoryBean 설정 -->
<!--    <bean id="userService" class="org.springframework.aop.framework.ProxyFactoryBean">-->
<!--        <property name="target" ref="userServiceImpl"/>-->
<!--&lt;!&ndash;    어드바이스와 어드바이저를 동시에 설정해줄 수 있는 프로퍼티. 리스트에 어드바이스나 어드바이저의 빈 아이디를 값으로 넣어주면 된다. 기존의 ref 애트리뷰트를 사용하는 DI 와는 방식이 다름에 주의해야 한다.&ndash;&gt;-->
<!--        <property name="interceptorNames">-->
<!--            <list>-->
<!--&lt;!&ndash;            한 개 이상의 <value> 태그를 넣을 수 있다.&ndash;&gt;-->
<!--                <value>transactionAdvisor</value>-->
<!--            </list>-->
<!--        </property>-->
<!--    </bean>-->

<!--    어드바이저를 이용하는 자동 프록시 생성기 등록 (AOP) -->
<!--    <bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"/>-->

<!--    AOP 포인트컷 빈 -->
<!--    <bean id="transactionPointcut" class="user.service.NameMatchClassMethodPointcut">-->
<!--                                    &lt;!&ndash;   클래스 이름 패턴 &ndash;&gt;-->
<!--        <property name="mappedClassName" value="*ServiceImpl"/>-->
<!--                            &lt;!&ndash;   메소드 이름 패턴 &ndash;&gt;-->
<!--        <property name="mappedName" value="upgrade*"/>-->
<!--    </bean>-->

<!--    포인트컷 표현식을 사용한 빈 설정 -->
<!--    <bean id="transactionPointcut" class="org.springframework.aop.aspectj.AspectJExpressionPointcut">-->
<!--        <property name="expression" value="execution(* *..*ServiceImpl.upgrade*(..))"/>-->
<!--    </bean>-->

<!--    프록시 팩토리 빈을 제거한 후의 빈 설정 -->
    <bean id="userService" class="user.service.UserServiceImpl">
        <property name="userDao" ref="userDao"/>
        <property name="mailSender" ref="mailSender"/>
    </bean>

<!--    <bean id="userServiceImpl" class="user.service.UserServiceImpl">-->
<!--        <property name="userDao" ref="userDao"/>-->
<!--        <property name="mailSender" ref="mailSender"/>-->
<!--    </bean>-->

<!--    트랜잭션 어드바이스 빈 설정 -->
<!--    <bean id="transactionAdvice" class="user.service.TransactionAdvice">-->
<!--        <property name="transactionManager" ref="transactionManager"/>-->
<!--    </bean>-->

<!--    포인트컷 빈 설정 -->
<!--    <bean id="transactionPointcut" class="org.springframework.aop.support.NameMatchMethodPointcut">-->
<!--        <property name="mappedName" value="upgrade*"/>-->
<!--    </bean>-->

<!--    어드바이저 빈 설정 -->
<!--    <bean id="transactionAdvisor" class="org.springframework.aop.support.DefaultPointcutAdvisor">-->
<!--        <property name="advice" ref="transactionAdvice"/>-->
<!--        <property name="pointcut" ref="transactionPointcut"/>-->
<!--    </bean>-->

    <bean id="userDao" class="user.dao.UserDaoJdbc">
        <property name="dataSource" ref="dataSource"/>
    </bean>

<!--    <bean id="mailSender" class="org.springframework.mail.javamail.JavaMailSenderImpl">-->
<!--        <property name="host" value="mail.server.com"/>-->
<!--    </bean>-->

<!--    테스트용 UserService 의 등록 -->
<!--    스태틱 멤버 클래스는 $로 지정한다. / 프로퍼티 정의를 포함해서 userService 빈의 설정을 상속받는다. -->
    <bean id="testUserService" class="user.service.UserServiceTest$TestUserService" parent="userService"/>

    <bean id="mailSender" class="user.service.DummyMailSender">
        <property name="host" value="mail.server.com"/>
    </bean>

</beans>